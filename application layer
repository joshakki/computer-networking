
chapter 1 application layer

1.1
1.1.1 network application architectures
        it is of two types peer to peer and the other is client-server architecture

client server architectures- in this type of architectcures there is a web server serving to various host that are known as clients that can be any devie such as laptop computer etc.client contact the server by sending the information in terms of packets.so in this type of model we reqire data centes to hold a large amount of requests from clients at the same time

P2P architecture - in this type of architecutre devices are not linked by any server instead they are directely linked to each other this link is known as peer. example Bittorrent.
 some of the applications use hybrid structure that contain both client server architecture and P2P architecture.example many messaging apps use user IP address to track the user but the messaging content is sent directly between the user hosts.

1.1.2  how process communicate

programs in the end system communicate with the help of processes.these proesses communicate with each other by exchanging messages through computer network
any process sends or receives messages by a software interface called as socket.this socket is commonly known as appliation programming interface(API).application developer controls some specific things on the network side but have full access on the application layer side.on network side the application developer controls choice of transport protocol,ability to fix maximum buffer and maximum segment sizes.to identify the address in network host is identified by its IP address that is unique for every user host 

process to process reliable data transfer
in a computer network packet loss occurs which is acceptable.this could overflow a buffer in router which leads to discard of packet by the host or host when some of the packets gets corrupted.this is not acceptable for many applications such as financial applications thus to control these kind of packet loss we provide reliable data transfer service.it ensures that data send by application at one end is received correctely at the other end of the application.

throughput 
it is equivalent to discharge i.e rate at which discharge occurs.for any process to pass on message on to network we need a minimum amount of throughput so as to maintain the connection for example in any application if we need 32 kbps then data is send and received at 32 kbps.if the traffic in transport is not allowing the throughput of 32 kbps then the call will either be disrupted or will end.

transport service -
internet makes two protocols available for the applications
tcp and udp 

1.TCP SERVICE- TRANSMISSION CONTROL PROTOCOL 
It includes a connection oriented service and a reliable data transfer service.
connetion oriented service-
TCP exchange transport layer control information with the client and the server before application level messages begin to flow.this alerts both the server and the client to prepare them for the exchange of packets.after this a TCP connection is said to exits between the sockets of the process.both the server and the clients and exchange the messages simultaneously.
2.reliable data transfer service 
TCP helps in delivering all the data sent without any error and in proper order.

SECURE SOCKETS LAYER(SSL)-
since tcp or udp both does not provide any encryption.so to keep the data safe secure sockets layers is an enanchment to TCP.if any application wants to use the services of SSL it needs a SSL code in both the client and server sides of the application. when any application uses SSL  it passes data to SSL which encrypts the data which then passes through the network and when it reaches the server's SSL it decrypts it and then it is send to the application on the server side.

UDP SERVICES 
USER DATAGRAM PROTOCOL is an unreliable service and data sent is not necessarely in order.	

HTTP - 
HyperText Transfer Protocol it is implemented in both client and server program. it works on the TCP service. the client send message it is passed through the client's socket and then by the help of network it reaches the server's socket.this is then passed on to the server which then takes the appropriate actions as per the messages.
	

HTTP with non persistent connections
in non persistent connections first of TCP connection is developed to make the communication of processes possible. this process occurs as follows,first of all as the client request the information from the server or triess to do any other task a small packet is sent to the server and it is then sent back to the host to establish the reliable TCP connection.this connection discontinues after each message.thus in non persistent connection this process is repeated for each and every message or request done by the client.

ROUND TRIP TIME -
it is the time taken by the small packet to travel from the client to server then back to client and again back to server to establish TCP connection.
 
HTTP with persistent connection 
in this TCP connection once established remains until the total work is completed.

HTTP Message format

GET /somedir/page.html HTTP/1.1
Host: www.someschool.edu
Connection: close
User-agent: Mozilla/5.0
Accept-language: fr

this is a HTTP message format 
 in each line format is - carrige returns and a line feed.	
though message can have one to as many lines as possible.
first line is request line and and after it are called as the Header lines
 
Request line have three fields -Method field, URL field, HTTP version field.

method fields indicate the method to be performed on the object identified by the URL.ex- GET  means to retrive the data. as in above example request is to get the /somedir/page.html and 1.1 is the HTML version.		

connection : close defines that it does not want the connection to be persistent.
user-agent tells us about the browser version that client is using 

last is the language that the browser is working on.
afte header line there is a entity body.its use example when a user searh words to a search engine 

HTTP response message

HTTP/1.1 200 OK
Connection: close
Date: Tue, 18 Aug 2015 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 18 Aug 2015 15:11:03 GMT
Content-Length: 6821
Content-Type: text/html

it consists of three sections - initial status line, six header lines, then entity body which contains requested object itself.
status line has three fields: protocol version field , status code and a corresponding status messages.
status line indicates server and the message

some common stutus codes

200 O.K - request succedded and the information is returned
301 Moved permenantely - requested object has been permenantely moved;the new URL is specified in location
400 Bad Request - request was not understood by the server 

404 not found - the requested document does not exist on the server.
505 HTTP Version Not supported - the requested HTTP protocol version is not supported by the server.

next comes the header lines 
connection : close tells that the TCP connection is going to close after sending the message.
date and time
Server: Apache/2.2.3 (CentOS)   it tells that the message was generated by the apache server.
last modified
content length and type are the two last lines.

Cookies 
these are the files stored in the system of the user.these files store the information that the user has previsoly acccessed on any website.the website then creates a file and store in it the system of the user.these files help the website to guide the user on the basis of his previous session.

Web caching
these are the proxy server which stores the information which any user connected to it accessed.once the information is stored in cacher server it is then provided to user by the cache server only.it helps in lessing the delay and also reduces the traffic on the main server.

Conditional GET
it keeps the data stored in cache up to date.as when the data is stored in cache server it can get out of date as the main server might get an updated version of that data or it can be removed from the server. so conditional GET keep an eye and updates it.	

Electronic mail in the internet 

to transfer any mail we need three components
1.user 2.mail servers  3.SMTP

when user sends any mail to definite mail address it first goes to mail servers of the user. mail servers act as the letter box of the post office.
from mail servers on the senders side this mail is further sent to the mail server of the receiver's side.then from the mail server on receiver side it is sent to user device when he access the mail.

SMTP 
simple mail transfer protocol uses the TCP services and helps in transfering a mail from sender to receiver.

when sender tries to send any mail to any address it is placed in the message queue of the mail server.
the SMTP on sender side sees the messege on the mail server and opens a TCP connection with the SMTP on the receiver side.after establishing a TCP connection with the receiver SMTP server mail is forwarded to the mail server on the receivers side.then the TCP connection is closed.		

differene in HTTP and SMTP 

1.HTTP is basically a PULL protocol while SMTP is push protocol. 
2.SMTP requires every thing to be encoded in 7-bit ASCII format while there is no such restriction for HTTP.	

Mail access protocols 

to read a mail user need to access the mail server so he need to do pull opertaion from the mail server. this cannot be done by the SMTP server as it is only a push protocol. so we need mail access protocols as POP3,IMAP and HTTP.

POP3
Post office protocol- version3
its working is in three stages - authorization transaction and update.

IMAP
since POP3 delets the mail once read so to solve this problem for a user who access his mail from multiple devices IMAP was introduced so that user can create a file and move it to any location and access it while required.





DNS ( the internet directory service)

Domain name service's main task is to convert the hostname into the IP address

when the user runs the client side of the DNS application browser extract the hostname from the URL and passes the host name to the client side of the DNS application. then DNS client sends a query containing the hostname to a DNS server.
then DNS client receives IP address for the hostname after this client can initiate the TCP connection to the HTTP server process at port 80.

how DNS works 

DNS query is sent by the client side and the reply messege is received with the IP address.this inquiry and the reply message is sent over the UDP dategrams with port 53.

single DNS server
DNS contains all the information of the mappings of the internet.client directs all quiries to the DNS server and DNS server sents back appropriate reply to the client. it is a centralized type design but it also contains some problems.
1. if DNS fails whole internet fails.
2.a single server needs to handle all of the quiries coming from multiple clients.
3.delays are directely proprotional to the distance between the client and the DNS server.
4. needs a lot of maintaince.	

 so we need a distributed database internet -
it consists of three layered structure - root DNS sever, top-level domain DNS server, authorative DNS server.
whenever a query is sent first it goes to one of the root servers and then it responds by the IP address of the TOP level domain server,further top level domain DNS is contacted and it responds with IP address of the authorative server.

Local DNS server
each ISP has a local dns server.when host connects to the isp it provides the host with IP address of one or more local dns servers

DNS caching
it is a done to lessen the dealy time.as when someone request an IP address
 it is stored in the cache server so that if another user quiries for the same IP address it can be provided him without any delay.
 
resource records
it consists of four parts -Name, Value, Type, TTL

TTL is the time to live of the resource record.it determines when to removed form a cache
meaning of name and value depend on the type 
 type=A the name is hostname and value is IP address for the hostname.
 type=NS name is a domain and value is a hostname of an authoratative DNS server.
 type=CNAME then value is a common hostname for the hostname.
 type=MX then value is a email server name.


Peer to Peer file Distribution 

when a file is transferred form a server to the various hosts at the same time then it leads to the enormus amount of load at the server.so the solution to this problem is peer to peer distribution by which any device can transfer any part of the file to any system which requires that file.ex- bittorrent.

di = download rate of the ith peer's access link.
us = upload rate of server's access link.
ui = upload rate of ith peer's access link.
F = size of file to be distributed in bits.
N = number of peers who want to get the copy of file.
dmin = download rate of the peer with lowest download rate

initally the server holds the file so it must transfer each bit of the file to peer so that remaining can get the access link and access the file.so minimum distribution time is at least F/us.
a peer with lowest download rate need minimum of F/dmin 
minimum distribution time is therefore,max of {Fus,Fdmin,NFus, NF/(us+u1+....uN)}

bit torrent

it is also a P2P protocol for file distribution.torrents are the peer participating in the distribution of file.peers shares a chunks from one another.each chunks size is of 256 bytes.each peer has to download all the chunks available.

each torrent has a tracker which keeps all the data of the peers joining the torrent and is in torrent.


